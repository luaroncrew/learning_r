# function defining
imc = function(weight, heigth){
result = weight/(heigth^2)
return(result)
}
class(imc)
class(imc)
imc(63, 173)
class(imc)
# function defining
imc = function(weight, heigth){
result = weight/(heigth^2)
return(result)
}
class(imc)
imc(63, 1.73)
}
# function defining
imc = function(weight, heigth){
result = weight/(heigth^2)
return(result)
}
class(imc)
imc(63, 1.73)
# function defining
imc = function(weight, heigth=1.73){
result = weight/(heigth^2)
return(result)
}
class(imc)
imc(weight=63)
#
# function defining
imc = function(weight, heigth=1.73){
result = weight/(heigth^2)
return(result)
}
class(imc)
imc(weight=63)
a = c(1, 2, 3, 9)
b = c(1, 1, 6, 9)
a>b
(a > 4) & (a > b)
# logic operators
a = c(1, 2, 3, 9)
b = c(1, 1, 6, 9)
a > b
(a > 4) & (a > b)
(a = 1) | (b = 1)
(a > 4) & (a > b)
(a = 1) | (b > 1)
(a = 1) | (b > 1)
a > b
a > b
# logic operators
a = c(1, 2, 3, 9)
b = c(1, 1, 6, 9)
a > b
(a > 4) & (a > b)
(a = 1) | (b > 1)
# logic operators
a = c(1, 2, 3, 9)
b = c(1, 1, 6, 9)
a > b
(a > 4) & (a > b)
(a == 1) | (b > 1)
# comparing to None
breakfast = ("pizza", "burger", NA, "Sushi")
is.na(breakfast)
# comparing to None
breakfast = c("pizza", "burger", NA, "Sushi")
is.na(breakfast)
source("~/PycharmProjects/learning_r/functions.R")
install.packages(questionr)
install.packages('questionr')
conjoint1 <- c(1200, 1180, 1750, 2100)
conjoint2 <- c(1450, 1870, 1690, 0)
nb_personnes <- c(4, 2, 3, 2)
revenu = (conjoint1 + conjoint2)/nb_personnes
conjoint1 <- c(1200, 1180, 1750, 2100)
conjoint2 <- c(1450, 1870, 1690, 0)
nb_personnes <- c(4, 2, 3, 2)
revenu = (conjoint1 + conjoint2)/nb_personnes
revenu
temperature <- c(3.4, 4.8, 8.4, 11.4, 15.8, 19.4, 22.2, 21.6, 17.6, 13.4, 7.6, 4.4)
precipitations <- c(47.2, 44.1, 50.4, 74.9, 90.8, 75.6, 63.7, 62, 87.5, 98.6, 81.9, 55.2)
mean(temperature)
sum(precipitations)
temperature <- c(3.4, 4.8, 8.4, 11.4, 15.8, 19.4, 22.2, 21.6, 17.6, 13.4, 7.6, 4.4)
precipitations <- c(47.2, 44.1, 50.4, 74.9, 90.8, 75.6, 63.7, 62, 87.5, 98.6, 81.9, 55.2)
mean(temperature)
sum(precipitations)
diff(temperature)
cumsum(temperature)
moyennes = (maths + anglais + sport)/3
moyennes
maths <- c(12, 16, 8, 18, 6, 10)
anglais <- c(14, 9, 13, 15, 17, 11)
sport <- c(18, 11, 14, 10, 8, 12)
moyennes = (maths + anglais + sport)/3
moyennes
maths <- c(12, 16, 8, 18, 6, 10)
anglais <- c(14, 9, 13, 15, 17, 11)
sport <- c(18, 11, 14, 10, 8, 12)
pmin(maths, anglais, sport)
library(questionr)
data(hdv2003)
View(hdv2003)
View(x = hdv2003)
d = hdv2003
nrow(x = d)
d = hdv2003
nrow(x = d)
ncol(x = d)
colnames(x = d)
str(object = d)
d$sexe
head(x = d$age)
d$sexe
head(x = d$age)
tail(x = d$age, 10)
head(x = d$heures.tv, n = 10)
# creation of new variables
head(x = d$heures.tv, n = 10)
d$minutes.tv <- d$heures.tv * 60
head(x = d$minutes.tv)
# creating temporary column
d$temp <- NA
d$temp
class(d$temp)
ncol(x = d)
ncol(x = d) # before
d$temp = NULL
ncol(d)
d$temp <- NA
d$temp
class(d$temp)
# deleting column
ncol(x = d) # before
d$temp = NULL
ncol(d)
# some short analysis
min(d$age)
str(object = d)
median(d$age)
max(d$age) - min(d$age)
var(x = d$age)
sd(x = d$age)
max(d$age) - min(d$age)
var(x = d$age)
sd(x = d$age)
quantile(x = d$age, probs = 0.25)
# dispersion indicators, stats
max(d$age) - min(d$age)
var(x = d$age)
sd(x = d$age)
quantile(x = d$age, probs = 0.25)
quantile(x = d$age, probs = 0.75)
summary(object = d$age)
hist(x = d$age)
hist(x = d$age)
hist(x = d$age, breaks = 10)
hist(x = d$age, breaks = 15)
hist(x = d$age, breaks = 5)
hist(x = d$age, breaks = 20)
hist(x = d$age, col = "skyblue",
main = "Répartition des ages des enquêtés",
xlab = "age",
ylab = "Effectif
)
hist(x = d$age, col = "skyblue",
main = "Répartition des ages des enquêtés",
xlab = "age",
ylab = "Effectif
)
hist(x = d$age, col = "skyblue",
main = "Répartition des ages des enquêtés",
xlab = "age",
ylab = "Effectif"
)
hist(x = d$age, col = "skyblue",
main = "Répartition des ages des enquêtés",
xlab = "age",
ylab = "Effectif")
boxplot(x = d$age, main = "Distribution de l'age")
table(x = d$sexe)
table(x = d$sexe)
table(x = d$qualif)
tab <- table(x = d$qualif)
sort(tab)
tab <- table(x = d$qualif)
sort(tab)
summary(object = d$qualif)
tab <- table(x = d$qualif, useNA = "always")
sort(tab)
summary(object = d$qualif)
freq(x = d$qualif)
freq(x = d$qualif, valid = FALSE, total = TRUE, sort = "dec")
tab <- table( x = d$qualif )
barplot(height = tab, main = 'Répartition par qualification', las= 2, cex.names = 0.4)
tab <- table(x = d$sexe)
pie(x = tab)
help("ifelse")
d$occupGroup <- ifelse(test = (d$occup == "Exerce une profession"),
yes = "actif",
no = "inactif")
table(d$occupGroup)
d$occup
d$occupGroup <- ifelse(test = (d$occup == "Exerce une profession" | d$occup == "Chomeur"),
yes = "actif",
no = "inactif")
table(d$occupGroup)
d$occupGroup <- ifelse(test = (d$occup == "Exerce une profession"),
yes = "actif",
no = "inactif")
table(d$occupGroup)
d$occupGroup <- ifelse(test = (d$occup %in% c("Exerce une profession","Chomeur")),
yes = "actif",
no = "inactif")
table(d$occupGroup)
?cut
d$ageGroup <- cut(x = d$age, breaks = c(min(d$age),30,50,max(d$age)) ,
include.lowest =  TRUE)
table(d$ageGroup)
dataframe = mtcars
dimensions = dim(mtcars)
dataframe = mtcars
dim(mtcars)
View(mtcars)
colnames(mtcats)
colnames(x=mtcars)
colnames(x=dataframe)
str(dataframe)
table(dataframe$cyl)
dataframe$cyl
dataframe$cyl <- factor(dataframe$cyl)
str(dataframe)
variables = c(dataframe$cyl, dataframe$vs, dataframe$am, dataframe$gear, dataframe$carb)
variables = factor(variables)
str(dataframe)
variables = c(dataframe$cyl, dataframe$vs, dataframe$am, dataframe$gear, dataframe$carb)
factor(variables)
str(dataframe)
for (variable in variables){
print(variable)
}
for (variable in variables){
print(variable)
}
for (variable in variables){
print(variable)
}
dataframe$cyl <- factor(dataframe$cyl)
dataframe$vs <- factor(dataframe$vs)
dataframe$am <- factor(dataframe$am)
dataframe$gear <- factor(dataframe$gear)
dataframe$carb <- factor(dataframe$carb)
str(dataframe)
# TP 1
View(mtcars)
# ex 1
dataframe = mtcars
dim(dataframe)
colnames(x=dataframe)
str(dataframe)
# how to write it in a for-loop?
dataframe$cyl <- factor(dataframe$cyl)
dataframe$vs <- factor(dataframe$vs)
dataframe$am <- factor(dataframe$am)
dataframe$gear <- factor(dataframe$gear)
dataframe$carb <- factor(dataframe$carb)
str(dataframe)
mean(dataframe$mpg)
quantile(dataframe$qsec)
quantile(dataframe$qsec, probs=seq(0.1, 0.2, 0.3))
quantile(dataframe$qsec, probs=seq(0, 1, 0.1))
quantile(dataframe$qsec)
quantile(dataframe$qsec, probs=seq(0, 1, 0.1))
# ex 2
mean(dataframe$mpg)
max(dataframe$wt)
median(dataframe$hp)
quantile(dataframe$qsec)
quantile(dataframe$qsec, probs=seq(0, 1, 0.1))
sd(dataframe$qsec, na.rm=True)
sd(x=dataframe$qsec, na.rm=TRUE)
var(x=dataframe$qsec, na.rm=TRUE)
table(dataframe$cyl)
table(dataframe$vs)
table(dataframe$am)
table(dataframe$gear)
table(dataframe$carb)
hist(dataframe$qseq)
hist(x=dataframe$qsec)
hist(x=dataframe$qsec)
boxplot(x=dataframe$qsec)
barplot(x=dataframe$carb)
barplot(x=dataframe$carb)
barplot(dataframe$carb)
barplot(table(dataframe$carb))
pie(table(dataframe$vs))
dataframe$consumption_per_100km <-  235.214583 / dataframe$mpg
dataframe$qsec_cut = cut(dataframe$qsec, breaks=3)
View(dataframe)
dataframe$consumption_class <- ifelse(test = (
dataframe$consumption_per_100km >= average_consumption)),
yes = "high consumption",
no = "low consumption")
# 1 mile/gal is 235.214583 l/100km so:
dataframe$consumption_per_100km <-  235.214583 / dataframe$mpg
dataframe$qsec_cut = cut(dataframe$qsec, breaks=3)
average_consumption = mean(consumption_per_100km)
dataframe$consumption_class <- ifelse(test = (dataframe$consumption_per_100km >= average_consumption)),
yes = "high consumption",
no = "low consumption")
dataframe$consumption_class <- ifelse(test = (dataframe$consumption_per_100km >= average_consumption),
yes = "high consumption",
no = "low consumption")
average_consumption = mean(consumption_per_100km)
dataframe$consumption_class <- ifelse(test = (
dataframe$consumption_per_100km >= average_consumption),
yes = "high consumption",
no = "low consumption")
dataframe$consumption_per_100km <-  235.214583 / dataframe$mpg
dataframe$qsec_cut = cut(dataframe$qsec, breaks=3)
average_consumption = mean(dataframe$consumption_per_100km)
dataframe$consumption_class <- ifelse(test = (
dataframe$consumption_per_100km >= average_consumption),
yes = "high consumption",
no = "low consumption")
View(dataframe)
help("read.csv")
help("read.csv")
help("read.csv")
getwd()
setpwd()
setwd() # bash cd
setwd('/') # bash cd
getwd() # bash pwd
read.csv('datasets/Titanic.csv')
read.csv('PycharmProjects/learning_r/datasets/Titanic.csv')
setwd("~/PycharmProjects/learning_r")
read.csv('/datasets/Titanic.csv')
ls()
read.csv('datasets/Titanic.csv')
dataset <- read.csv('datasets/Titanic.csv')
library(readxl)
install.packages(readxl)
install.packages('readxl')
library(readxl)
just_another_set <-read_excel('datasets/pokemon.xlsx')
View(just_another_set)
View(just_another_set)
View(hdv2003)
just_another_set <- read_excel(path='datasets/pokemon.xlsx')
just_another_set <- read_excel(path='./datasets/pokemon.xlsx')
just_another_set <- read_excel(path='datasets/pokemon.xlsx', sheet='pokemon')
View(just_another_set)
install.packages('feather')
write_feather(just_another_set)
library(feather)
# feather package
write_feather(just_another_set)
library(feather)
# feather package
write_feather(just_another_set, path='datasets/')
library(feather)
# feather package
write_feather(just_another_set, path='datasets')
library(feather)
# feather package
write_feather(just_another_set, path='datasets.csv')
# just exporting files
write.csv(just_another_set, path='datasets/test_dataset_export.csv')
# just exporting files
write.csv(just_another_set, path='datasets/test_dataset_export.csv', append=FALSE)
# just exporting files
write.csv(just_another_set, file='datasets/test_dataset_export.csv', append=FALSE)
save.image(file='10febworkspace.Rdata')
load(file='10febworkspace.Rdata')
data(flights.csv)
install.packages("nycflights13")
library(nycflights13)
data(flights.csv)
data(flightx)
data(flights)
rm(list=ls())
# exercise working with files
library(nycflights13)
data(flights)
force(flights)
dim(flights)
dim(flights)
colnames(fights)
colnames(x=fights)
library(nycflights13)
dataset = data(flights)
dim(flights)
colnames(x=fights)
